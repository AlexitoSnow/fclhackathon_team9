/*[
  {
    "path": "lib\\main.dart",
    "description": "App root using GetMaterialApp; configure routes or change home to include the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:fclhackathon_team9/core/bindings/app_bindings.dart';\nimport 'package:fclhackathon_team9/core/theme/app_theme.dart';\nimport 'package:fclhackathon_team9/modules/combined/views/combined_screens.dart';\n\nvoid main() {\n  runApp(const AppRoot());\n}\n\nclass AppRoot extends StatelessWidget {\n  const AppRoot({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return GetMaterialApp(\n      title: 'Travel wallet value',\n      debugShowCheckedModeBanner: false,\n      initialBinding: AppBindings(),\n      theme: AppTheme.light,\n      home: const CombinedScreens(),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\core\\bindings\\app_bindings.dart",
    "description": "Central GetX bindings; register new controllers/services for the next screen without touching entrypoints.",
    "content": "import 'package:get/get.dart';\nimport 'package:fclhackathon_team9/modules/combined/controllers/combined_controller.dart';\nimport 'package:fclhackathon_team9/modules/wallet/controllers/wallet_controller.dart';\n\nclass AppBindings extends Bindings {\n  @override\n  void dependencies() {\n    Get.put<CombinedController>(CombinedController(), permanent: true);\n    Get.put<WalletController>(WalletController(), permanent: true);\n  }\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_colors.dart",
    "description": "Global color palette; add colors specific to the next screen for consistent theming.",
    "content": "import 'package:flutter/material.dart';\n\nclass AppColors {\n  static const Color primaryDark = Color(0xFF153B44);\n  static const Color primaryGreen = Color(0xFFC6DE41);\n  static const Color lightSurface = Color(0xFFE2EBEF);\n  static const Color trackGrey = Color(0xFFACACAC);\n  static const Color textPrimary = Color(0xFF153B44);\n  static const Color textSecondary = Color(0xFF6B8A92);\n  static const Color navUnselected = Color(0xFFE2EBEF);\n  static const Color white = Colors.white;\n  static const Color black = Colors.black;\n  static const Color transparent = Colors.transparent;\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_dimensions.dart",
    "description": "Sizing and spacing constants; reuse values to size and space elements on the next screen.",
    "content": "class AppDimensions {\n  static const double radiusUnit = 1.2;\n  static const double spaceXS = 0.8;\n  static const double spaceS = 1.2;\n  static const double spaceM = 2.0;\n  static const double spaceL = 3.0;\n  static const double spaceXL = 4.0;\n  static const double iconUnit = 2.2;\n  static const double cardPaddingUnit = 2.0;\n  static const double pillHeightUnit = 4.0;\n  static const double progressHeightUnit = 2.2;\n  static const double bottomNavHeightUnit = 10.8;\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_durations.dart",
    "description": "Animation timing constants; standardize animations and transitions for the next screen.",
    "content": "class AppDurations {\n  static const Duration fast = Duration(milliseconds: 150);\n  static const Duration normal = Duration(milliseconds: 250);\n  static const Duration slow = Duration(milliseconds: 400);\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_images.dart",
    "description": "Asset registry; declare image/icon paths used by the next screen.",
    "content": "class AppImages {\n  static const String base = 'assets/images';\n  static const String cellular = '\u0000';\n  static const String wifi = '\u0000';\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_strings.dart",
    "description": "String constants; add labels and copy for the next screen to centralize text.",
    "content": "class AppStrings {\n  static const String appTitle = 'Travel wallet value';\n  static const String wallet = 'Wallet';\n  static const String home = 'Home';\n  static const String badges = 'Badges';\n  static const String profile = 'Profile';\n  static const String totalWalletValue = 'Total Wallet Value';\n  static const String earningThisMonth = 'Earning this month';\n  static const String claimAtEnd = 'Claim at the end of the month';\n  static const String notifications = 'Notifications';\n  static const String transactions = 'Transactions';\n}\n"
  },
  {
    "path": "lib\\core\\theme\\app_theme.dart",
    "description": "App ThemeData; extend text styles and color scheme used by widgets on the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\n\nclass AppTheme {\n  static ThemeData get light {\n    return ThemeData(\n      brightness: Brightness.light,\n      scaffoldBackgroundColor: Colors.white,\n      colorScheme: ColorScheme.fromSeed(\n        seedColor: AppColors.primaryDark,\n        primary: AppColors.primaryDark,\n        secondary: AppColors.primaryGreen,\n      ),\n      textTheme: const TextTheme(\n        bodyLarge: TextStyle(color: AppColors.textPrimary),\n        bodyMedium: TextStyle(color: AppColors.textPrimary),\n        bodySmall: TextStyle(color: AppColors.textSecondary),\n        titleLarge: TextStyle(color: AppColors.textPrimary, fontWeight: FontWeight.w600),\n        titleMedium: TextStyle(color: AppColors.textPrimary, fontWeight: FontWeight.w600),\n        titleSmall: TextStyle(color: AppColors.textPrimary),\n      ),\n      useMaterial3: true,\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\combined\\controllers\\combined_controller.dart",
    "description": "GetX controller for tab index; extend to manage navigation state for the next screen.",
    "content": "import 'package:get/get.dart';\n\nclass CombinedController extends GetxController {\n  final RxInt currentIndex = 1.obs;\n  void setIndex(int index) => currentIndex.value = index;\n}\n"
  },
  {
    "path": "lib\\modules\\combined\\views\\combined_screens.dart",
    "description": "Root page composition with tabs; add the next screen to pages or navigate via Get.to.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/core/constants/app_dimensions.dart';\nimport 'package:fclhackathon_team9/modules/combined/controllers/combined_controller.dart';\nimport 'package:fclhackathon_team9/modules/combined/widgets/bottom_nav_bar.dart';\nimport 'package:fclhackathon_team9/modules/home/views/home_view.dart';\nimport 'package:fclhackathon_team9/modules/wallet/views/wallet_view.dart';\nimport 'package:fclhackathon_team9/modules/badges/views/badges_view.dart';\nimport 'package:fclhackathon_team9/modules/profile/views/profile_view.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass CombinedScreens extends StatelessWidget {\n  const CombinedScreens({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final controller = Get.find<CombinedController>();\n    final pages = <Widget>[\n      const HomeView(),\n      const WalletView(),\n      const BadgesView(),\n      const ProfileView(),\n    ];\n    return Scaffold(\n      backgroundColor: Colors.white,\n      body: SafeArea(\n        child: Obx(() => pages[controller.currentIndex.value]),\n      ),\n      bottomNavigationBar: Container(\n        decoration: const BoxDecoration(color: AppColors.primaryDark),\n        height: context.heightUnit * AppDimensions.bottomNavHeightUnit,\n        child: SafeArea(\n          top: false,\n          child: BottomNavBar(\n            currentIndex: controller.currentIndex.value,\n            onTap: controller.setIndex,\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\combined\\widgets\\bottom_nav_bar.dart",
    "description": "Bottom navigation widget; add a new tab or hook onTap to route to the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/core/constants/app_strings.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass BottomNavBar extends StatelessWidget {\n  final int currentIndex;\n  final ValueChanged<int> onTap;\n  const BottomNavBar({super.key, required this.currentIndex, required this.onTap});\n\n  @override\n  Widget build(BuildContext context) {\n    final itemWidth = context.screenWidth / 4;\n    return Row(\n      children: [\n        _NavItem(\n          width: itemWidth,\n          label: AppStrings.home,\n          icon: Icons.home_outlined,\n          selected: currentIndex == 0,\n          onTap: () => onTap(0),\n        ),\n        _NavItem(\n          width: itemWidth,\n          label: AppStrings.wallet,\n          icon: Icons.attach_money,\n          selected: currentIndex == 1,\n          onTap: () => onTap(1),\n        ),\n        _NavItem(\n          width: itemWidth,\n          label: AppStrings.badges,\n          icon: Icons.emoji_events_outlined,\n          selected: currentIndex == 2,\n          onTap: () => onTap(2),\n        ),\n        _NavItem(\n          width: itemWidth,\n          label: AppStrings.profile,\n          icon: Icons.person_outline,\n          selected: currentIndex == 3,\n          onTap: () => onTap(3),\n        ),\n      ],\n    );\n  }\n}\n\nclass _NavItem extends StatelessWidget {\n  final double width;\n  final String label;\n  final IconData icon;\n  final bool selected;\n  final VoidCallback onTap;\n  const _NavItem({\n    required this.width,\n    required this.label,\n    required this.icon,\n    required this.selected,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final color = selected ? AppColors.primaryGreen : AppColors.navUnselected;\n    final iconSize = context.heightUnit * 2.8;\n    return SizedBox(\n      width: width,\n      child: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Material(\n              color: AppColors.transparent,\n              borderRadius: BorderRadius.circular(iconSize),\n              clipBehavior: Clip.antiAlias,\n              child: InkWell(\n                onTap: onTap,\n                child: Padding(\n                  padding: EdgeInsets.all(context.heightUnit * 0.8),\n                  child: Icon(icon, size: iconSize, color: color),\n                ),\n              ),\n            ),\n            SizedBox(height: context.heightUnit * 0.6),\n            Text(\n              label,\n              style: TextStyle(\n                color: color,\n                fontSize: context.heightUnit * 1.3,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\wallet\\widgets\\balance_pill.dart",
    "description": "Reusable pill-style action/display component; can be reused on the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/core/constants/app_dimensions.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass BalancePill extends StatelessWidget {\n  final String amountText;\n  final VoidCallback onTap;\n  const BalancePill({super.key, required this.amountText, required this.onTap});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final radius = h * AppDimensions.radiusUnit;\n    final height = h * AppDimensions.pillHeightUnit;\n    final iconSize = h * (AppDimensions.iconUnit + 0.6);\n\n    return Material(\n      color: AppColors.primaryGreen,\n      borderRadius: BorderRadius.circular(radius),\n      clipBehavior: Clip.antiAlias,\n      child: InkWell(\n        onTap: onTap,\n        child: SizedBox(\n          height: height,\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Icon(Icons.attach_money, color: AppColors.textPrimary, size: iconSize),\n              SizedBox(width: context.widthUnit * 2.2),\n              Text(\n                amountText,\n                style: TextStyle(\n                  color: AppColors.textPrimary,\n                  fontWeight: FontWeight.w600,\n                  fontSize: h * 2.2,\n                ),\n              ),\n              SizedBox(width: context.widthUnit * 1.0),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\wallet\\widgets\\earnings_card.dart",
    "description": "Reusable progress card; show metrics or goals on the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/core/constants/app_dimensions.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass EarningsCard extends StatelessWidget {\n  final double progress;\n  final String progressLabel;\n  const EarningsCard({super.key, required this.progress, required this.progressLabel});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    final radius = h * AppDimensions.radiusUnit;\n\n    return Container(\n      decoration: BoxDecoration(\n        color: AppColors.lightSurface,\n        borderRadius: BorderRadius.circular(radius),\n      ),\n      padding: EdgeInsets.symmetric(horizontal: w * 4.2, vertical: h * 2.6),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Align(\n            alignment: Alignment.topRight,\n            child: Text(\n              progressLabel,\n              style: TextStyle(\n                color: AppColors.textPrimary,\n                fontWeight: FontWeight.w500,\n                fontSize: h * 1.72,\n              ),\n            ),\n          ),\n          SizedBox(height: h * 1.6),\n          LayoutBuilder(\n            builder: (context, constraints) {\n              final trackHeight = h * AppDimensions.progressHeightUnit;\n              final fillWidth = constraints.maxWidth * progress;\n              return Stack(\n                children: [\n                  Container(\n                    width: constraints.maxWidth,\n                    height: trackHeight,\n                    decoration: BoxDecoration(\n                      color: AppColors.trackGrey,\n                      borderRadius: BorderRadius.circular(radius),\n                    ),\n                  ),\n                  AnimatedContainer(\n                    duration: const Duration(milliseconds: 250),\n                    curve: Curves.easeOut,\n                    width: fillWidth,\n                    height: trackHeight,\n                    decoration: BoxDecoration(\n                      color: AppColors.primaryGreen,\n                      borderRadius: BorderRadius.circular(radius),\n                    ),\n                  ),\n                ],\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\wallet\\widgets\\total_value_card.dart",
    "description": "Reusable summary card; present totals or key figures on the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/core/constants/app_dimensions.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass TotalValueCard extends StatelessWidget {\n  final String amountText;\n  final String subtitle;\n  const TotalValueCard({super.key, required this.amountText, required this.subtitle});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    final radius = h * AppDimensions.radiusUnit;\n    final padding = EdgeInsets.symmetric(\n      horizontal: w * 5.6,\n      vertical: h * AppDimensions.cardPaddingUnit,\n    );\n\n    return Container(\n      decoration: BoxDecoration(\n        color: AppColors.lightSurface,\n        borderRadius: BorderRadius.circular(radius),\n      ),\n      padding: padding,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          SizedBox(height: h * 1.2),\n          Text(\n            '\u0000$amountText',\n            style: TextStyle(\n              color: AppColors.textPrimary,\n              fontWeight: FontWeight.w600,\n              fontSize: h * 3.4,\n            ),\n          ),\n          SizedBox(height: h * 1.2),\n          Text(\n            subtitle,\n            style: TextStyle(\n              color: AppColors.textPrimary,\n              fontSize: h * 1.4,\n            ),\n          ),\n          SizedBox(height: h * 1.2),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\utils\\extensions\\context_extensions.dart",
    "description": "Screen size helpers enabling responsive layout on the new screen",
    "content": "import 'package:flutter/widgets.dart';\n\nextension ContextResponsive on BuildContext {\n  double get screenWidth => MediaQuery.of(this).size.width;\n  double get screenHeight => MediaQuery.of(this).size.height;\n  double get widthUnit => screenWidth / 100;\n  double get heightUnit => screenHeight / 100;\n}\n\nclass ContextExtensionss {\n  final BuildContext context;\n  ContextExtensionss(this.context);\n  bool get isPortrait => MediaQuery.of(context).orientation == Orientation.portrait;\n  bool get isLandscape => !isPortrait;\n}\n"
  },
  {
    "path": "lib\\shared\\components\\search_input.dart",
    "description": "Reusable text input with optional search icon for new screen forms",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass SearchInput extends StatelessWidget {\n  final TextEditingController controller;\n  final String? placeholder;\n  final ValueChanged<String>? onChanged;\n  final bool readOnly;\n  final bool showIcon;\n  const SearchInput({\n    super.key,\n    required this.controller,\n    this.placeholder,\n    this.onChanged,\n    this.readOnly = false,\n    this.showIcon = false,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return SizedBox(\n      height: h * 5.2,\n      child: TextField(\n        controller: controller,\n        onChanged: onChanged,\n        readOnly: readOnly,\n        style: TextStyle(fontSize: h * 2.0, color: AppColors.primaryText),\n        decoration: InputDecoration(\n          hintText: placeholder,\n          prefixIcon: showIcon ? const Icon(Icons.search) : null,\n          isDense: true,\n          filled: true,\n          fillColor: AppColors.fieldBg,\n          contentPadding: EdgeInsets.symmetric(horizontal: h * 2.0, vertical: h * 1.6),\n          border: OutlineInputBorder(\n            borderRadius: BorderRadius.circular(h * 2.2),\n            borderSide: BorderSide.none,\n          ),\n        ),\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\shared\\components\\back_header.dart",
    "description": "Reusable header with back action; drop into new screen for consistent top bar",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:fclhackathon_team9/core/constants/app_colors.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass BackHeader extends StatelessWidget {\n  final String title;\n  final VoidCallback? onBack;\n  final Widget? rightAction;\n  const BackHeader({super.key, required this.title, this.onBack, this.rightAction});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    return Padding(\n      padding: EdgeInsets.symmetric(horizontal: w * 4.0),\n      child: Row(\n        children: [\n          Material(\n            color: Colors.transparent,\n            clipBehavior: Clip.antiAlias,\n            child: InkWell(\n              borderRadius: BorderRadius.circular(h * 5),\n              onTap: onBack ?? () => Get.back(),\n              child: Padding(\n                padding: EdgeInsets.all(h * 1.2),\n                child: Icon(Icons.chevron_left, color: AppColors.primaryText, size: h * 4.0),\n              ),\n            ),\n          ),\n          SizedBox(width: w * 1.5),\n          Expanded(\n            child: Text(\n              title,\n              style: TextStyle(\n                color: AppColors.primaryText,\n                fontWeight: FontWeight.w600,\n                fontSize: h * 3.2,\n              ),\n            ),\n          ),\n          if (rightAction != null) rightAction!,\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\shared\\components\\primary_gradient_button.dart",
    "description": "Shared primary action button for calls to action on the new screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:fclhackathon_team9/utils/extensions/context_extensions.dart';\n\nclass PrimaryGradientButton extends StatelessWidget {\n  final String label;\n  final VoidCallback? onPressed;\n  final bool loading;\n  final bool enabled;\n  final Gradient? gradient;\n  const PrimaryGradientButton({\n    super.key,\n    required this.label,\n    required this.onPressed,\n    this.loading = false,\n    this.enabled = true,\n    this.gradient,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final colors = gradient ??\n        const LinearGradient(colors: [Color(0xFF396764), Color(0xFF396764)], begin: Alignment.topLeft, end: Alignment.bottomRight);\n    return SizedBox(\n      height: h * 6.0,\n      width: double.infinity,\n      child: DecoratedBox(\n        decoration: BoxDecoration(\n          gradient: colors,\n          borderRadius: BorderRadius.circular(h * 3.0),\n        ),\n        child: Material(\n          color: Colors.transparent,\n          borderRadius: BorderRadius.circular(h * 3.0),\n          clipBehavior: Clip.antiAlias,\n          child: InkWell(\n            onTap: enabled && !loading ? onPressed : null,\n            child: Center(\n              child: loading\n                  ? SizedBox(\n                      width: h * 2.4,\n                      height: h * 2.4,\n                      child: const CircularProgressIndicator(\n                        strokeWidth: 2,\n                        valueColor: AlwaysStoppedAnimation<Color>(Color(0xFFFFFFFF)),\n                      ),\n                    )\n                  : Text(\n                      label,\n                      style: TextStyle(\n                        color: const Color(0xFFFFFFFF),\n                        fontWeight: FontWeight.w600,\n                        fontSize: h * 2.2,\n                      ),\n                    ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"
  }
]*/